version: "3"
services:

  # Zookeeper 서비스 설정 (Kafka의 의존성)
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  # Kafka 서비스 설정
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "chatting:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # 웹 서버 (nginx) 설정
  web:
    image: nginx
    container_name: web
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - spring-a
      - spring-b
      - spring-c

  # MySQL 데이터베이스 서비스 설정
  chatting-mysql:
    image: "mysql:8.0"
    container_name: "chatting-mysql"
    ports:
      - "3306:3306"
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ROOT_PASSWORD: 1248
      MYSQL_DATABASE: chatting_db

  # Observability 설정
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    user: "$UID:$GID"
    ports:
      - "3000:3000"
    volumes:
      - ./grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

  prometheus:
    image: quay.io/prometheus/prometheus:v2.52.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml


  # Spring Boot 애플리케이션 서버 A 설정
  spring-a:
    build: .
    container_name: spring-a
    ports:
      - "8081:8080"
    depends_on:
      - chatting-mysql
      - kafka

  # Spring Boot 애플리케이션 서버 B 설정
  spring-b:
    build: .
    container_name: spring-b
    ports:
      - "8082:8080"
    depends_on:
      - chatting-mysql
      - kafka

  # Spring Boot 애플리케이션 서버 C 설정
  spring-c:
    build: .
    container_name: spring-c
    ports:
      - "8083:8080"
    depends_on:
      - chatting-mysql
      - kafka

# 서비스들이 연결될 네트워크 설정
networks:
  chatting-network:
    driver: bridge

